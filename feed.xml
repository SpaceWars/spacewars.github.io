<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Space Wars</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://spacewars.github.io/</link>
    <atom:link href="http://spacewars.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 Jun 2015 14:21:38 -0300</pubDate>
    <lastBuildDate>Wed, 17 Jun 2015 14:21:38 -0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Padrões de Projeto de Software</title>
        <description>&lt;h1 id=&quot;patterns&quot;&gt;Patterns&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;criador&quot;&gt;Criador&lt;/h2&gt;

&lt;p&gt;O framework utilizado possui a seguinte estrutura, onde o director é responsável
por rodar as cenas (scenes), que são responsáveis por criar camadas (layers), que, por
sua vez, cria e gerencia sprites.&lt;/p&gt;

&lt;center&gt;
  &lt;script src=&quot;/js/mermaid.full.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;mermaid&quot;&gt;
  sequenceDiagram
    director-&amp;gt;&amp;gt;Scene: run()
    Scene-&amp;gt;&amp;gt;Layer: create()
    Layer-&amp;gt;&amp;gt;Sprite: create()
  &lt;/div&gt;
&lt;/center&gt;

&lt;h2 id=&quot;controladora&quot;&gt;Controladora&lt;/h2&gt;

&lt;p&gt;Basicamente, as Layers (camadas) gerenciam os enventos realizados pelo usuário, como apertar uma tecla
específica, e define uma resposta à essa ação do usuário, sendo que essa resposta pode envolver outras
partes da arquitetura.&lt;/p&gt;

&lt;!-- 
## Object Pool

Outro padrão bastante comum em jogos é a presença de uma *pool* de objetos. Este padrão é normalmente utilizando quando há uma alta demanda de objetos e há a possibilidade de reuso de um objeto. Assim é criado uma *pool* - normalmente uma lista -  onde todos os objetos são instanciados de uma vez, para serem usados sob demanda no decorrer da aplicação.

    class GameScene(Layer):
        is_event_handler = True

        def __init__(self):
            super(GameScene, self).__init__()
            self.background = BackgroundLayer(&#39;backgrounds/bluespace.png&#39;)
            self.spaceship = SpaceShipSprite()
            self.aerolites = []
            self.rohenians = []
            for x in xrange(50, WIDTH, 100):
                self.aerolites.append(AeroliteSprite(width=x))
                self.rohenians.append(RohenianSprite()) --&gt;

&lt;h2 id=&quot;event-based-asynchronous&quot;&gt;Event-based asynchronous&lt;/h2&gt;

&lt;p&gt;Padrões voltados para ocorrências em assíncrono, a fim de sanar a necessidade de receber inputs não esperados pelo usuario ou estados inesperados da aplicação:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import signal

def signal_handler(signal_received, frame):
    if signal_received is signal.SIGINT:
        # erase the ^C on Terminal
        print &quot;\r  &quot;
        exit(0)

if __name__ == &quot;__main__&quot;:
    resource.path.append(&#39;data&#39;)
    resource.reindex()
    font.add_directory(&#39;data/fonts&#39;)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGSEGV, signal_handler)
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- ## Command [Design Pattner Revised]

Algumas entradas que o sistema recebe

class SpaceshipAction(actions.Move):

    # step() is called every frame.
    # dt is the number of seconds elapsed since the last call.

    def step(self, dt):
        max_left = self.target.image.width * self.target.scale / 2
        max_right = WIDTH - self.target.image.width * self.target.scale / 2

        # Run step function on the parent class.
        super(SpaceshipAction, self).step(dt)

        # Determine velocity based on keyboard inputs.
        keyboard = EventHandle().keyboard
        velocity_x = 0
        velocity_y = 0
        velocity_x = 200 * (keyboard[key.RIGHT] - keyboard[key.LEFT])

        if self.target.position[0] &lt; max_left:
            self.target.position = (max_left, 100)

        if self.target.position[0] &gt; max_right:
            self.target.position = (max_right, 100)

        # Set the object&#39;s velocity.
        self.target.velocity = (velocity_x, velocity_y)
        if keyboard[key.LEFT]:
            self.target.move_left()
        elif keyboard[key.RIGHT]:
            self.target.move_right()
        else:
            self.target.center_spaceship() --&gt;

&lt;h2 id=&quot;singleton&quot;&gt;Singleton&lt;/h2&gt;

&lt;p&gt;Uma dificuldade que o time teve, foi a de conseguir um objeto &lt;em&gt;keyboard&lt;/em&gt; que conseguisse manter os estados das teclas. A biblioteca &lt;em&gt;pyglet&lt;/em&gt; fornecia uma solução, mas apenas a primeira instância de cada aplicação recebia as atualizações. A solução proposta então foi a de implementar esta instancia como &lt;em&gt;singleton&lt;/em&gt;, a fim de garantir que sempre que a primeira instancia pudesse ler lida a qualquer momento da aplicação.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/singleton.png&quot; alt=&quot;Singleton&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;keyboard-event&quot;&gt;Keyboard-event&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class EventHandle(object):

&quot;&quot;&quot;docstring for EventHandle&quot;&quot;&quot;

keyboard = None

def __new__(cls):
    if not hasattr(cls, &#39;instance&#39;):
        cls.instance = super(EventHandle, cls).__new__(cls)
    return cls.instance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keyboard = key.KeyStateHandler()
director.window.push_handlers(keyboard)
EventHandle().keyboard = keyboard
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;combo-factory-singleton-pool&quot;&gt;Combo: Factory-Singleton-Pool&lt;/h2&gt;

&lt;p&gt;A evolução anterior do Pool de objetos se fez a necessidade de ter um objeto que mantivesse o controle de produções e fornecimento dos objetos da pool, assim como  destrui-los corretamente,caso necessário. Desta forma, foi implementada uma &lt;em&gt;Factory&lt;/em&gt; responsavel pelo fornecimento dos objetos. Como a Factory poderia ser acionada de varias cenas do jogo, ela foi transformada em um  &lt;em&gt;singleton&lt;/em&gt; para garantir esta acessibilidade, evitando o desperdicio de recursos ao se criar objetos.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/fire-factory.png&quot; alt=&quot;FireFactory&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;firefactory&quot;&gt;FireFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class FireFactory(object):

    &quot;&quot;&quot;docstring for FireFactory&quot;&quot;&quot;

    ammo = {&#39;hero&#39;: [], &#39;enemies&#39;: []}

    def __new__(cls):
        if not hasattr(cls, &#39;instance&#39;):
            cls.instance = super(FireFactory, cls).__new__(cls)
        return cls.instance

    @classmethod
    def create_bullets(cls, bullet_type, qnt=50):
        if bullet_type in hero:
            for x in xrange(0, qnt):
                cls.ammo[&#39;hero&#39;].append(SpaceShipBullet())
        elif bullet_type in rohenian:
            for x in xrange(0, qnt):
                cls.ammo[&#39;enemies&#39;].append(RoheniansBullet())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;combo-factory-singleton-pool-dirty-flag&quot;&gt;Combo: Factory-Singleton-Pool-Dirty Flag&lt;/h2&gt;

&lt;p&gt;Uma das &lt;em&gt;Factories&lt;/em&gt; presentes no código apresentou a requisição de se saber se ela se encontrava ou não vazia. Desta forma, uma flag foi acrescentada nela para manter esta informação. Como esta informação pode ser obtida de forma assincrona, acabou se apresentando o padrão &lt;em&gt;Dirty Flag&lt;/em&gt; no contexto.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/enemy-factory.png&quot; alt=&quot;EnemyFactory&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;enemyfactory&quot;&gt;EnemyFactory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class EnemyFactory(object):

    &quot;&quot;&quot;docstring for EnemyFactory&quot;&quot;&quot;
    enemy_list = {&quot;Rohenian&quot;: [], &quot;Aerolite&quot;: []}

    def __new__(cls):
        if not hasattr(cls, &#39;instance&#39;):
            cls.instance = super(EnemyFactory, cls).__new__(cls)
        cls.empty = True
        return cls.instance

    @classmethod
    def populate_enemy(cls, enemy_type, qnt=1):

        if enemy_type in rohenian:
            for x in xrange(0, qnt):
                cls.enemy_list[&quot;Rohenian&quot;].append(
                    Rohenian())
            cls.empty = False
            return
        if enemy_type in aerolite:
            for x in xrange(0, qnt):
                cls.enemy_list[&quot;Aerolite&quot;].append(
                    Aerolite())
            cls.empty = False
            return
        assert 0, &quot;Bad enemy creation: &quot; + enemy_type
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sun, 10 May 2015 18:50:03 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/05/10/patterns.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/05/10/patterns.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Diagrama de classes</title>
        <description>&lt;p align=&quot;center&quot;&gt;
  Clique na imagem para melhor visualização.
  &lt;br /&gt;
  Versão curta:
  &lt;a href=&quot;/img/class_diagram_short.png&quot;&gt;
    &lt;img src=&quot;/img/class_diagram_short.png&quot; width=&quot;120%&quot; alt=&quot;Diagrama de classes&quot; /&gt;
  &lt;/a&gt;

  Versão completa:
  &lt;a href=&quot;/img/class_diagram.png&quot;&gt;
    &lt;img src=&quot;/img/class_diagram.png&quot; alt=&quot;Diagrama de classes&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2015 18:50:03 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/05/10/class_diagram.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/05/10/class_diagram.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Documento de Arquitetura</title>
        <description>&lt;h2 id=&quot;introduo&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;No ano de 3500, os seres do planeta &lt;em&gt;Rohines&lt;/em&gt; invadem a Terra em busca de água, algo que há muito já se tornara escasso e motivo para guerras intergalácticas. Nessa busca incansável, os &lt;em&gt;Rohinianos&lt;/em&gt; destruíram parte do planeta e poucos seres humanos sobreviveram. Em &lt;strong&gt;SpaceWars&lt;/strong&gt;, o jogador encorpora um dos poucos sobreviventes do Massacre &lt;em&gt;Rohiniano&lt;/em&gt; e deve escapar da Terra e ir em direção à &lt;em&gt;Ascarth&lt;/em&gt;, um planeta colonizado pelos seres humanos e um abrigo totalmente seguro. Mas para isso, o jogador deverá passar por toda a galáxia e enfrentar as piores raças inimigas que já viu!&lt;/p&gt;

&lt;h3 id=&quot;finalidade&quot;&gt;Finalidade&lt;/h3&gt;

&lt;p&gt;Este documento fornece uma visão arquitetural abrangente do sistema, usando diversas visões de arquitetura para representar diferentes aspectos do sistema. O Objetivo deste documento é formalizar as decisões arquiteturais importantes do projeto.&lt;/p&gt;

&lt;h3 id=&quot;escopo&quot;&gt;Escopo&lt;/h3&gt;

&lt;p&gt;Este Documento de Arquitetura se aplica ao desenvolvimento do jogo &lt;strong&gt;SpaceWars&lt;/strong&gt;, que está sendo desenvolvido na disciplina de Desenho de Software, na UnB&lt;/p&gt;

&lt;h2 id=&quot;representao-da-arquitetura&quot;&gt;Representação da Arquitetura&lt;/h2&gt;

&lt;center&gt;
    &lt;img src=&quot;/img/arquitetura.png&quot; alt=&quot;Diagrama de Arquitetura&quot; width=&quot;70%&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;metas-e-restries-de-arquitetura&quot;&gt;Metas e Restrições de Arquitetura&lt;/h2&gt;

&lt;p&gt;O jogo deve ser jogável em sistemas operacionais Linux e Mac OS X e não requisitar placa de video dedicada. Deve conseguir manter o &lt;em&gt;framerate&lt;/em&gt; mínimo de 30 fps e não requisitar mais que 1GB de RAM. A distribuição deve ser gratuita sob licença GPL3, com direito ao código fonte.&lt;/p&gt;

&lt;!-- # Visão de Casos de Uso

[Esta seção lista os casos de uso ou cenários do modelo de casos de uso se eles representam uma funcionalidade central e significativa do sistema final ou se têm uma ampla cobertura de arquitetura, ou seja, se experimentam muitos elementos arquiteturais ou se enfatizam ou ilustram um determinado ponto frágil da arquitetura.]

### Realizações de Casos de Uso

[Esta seção ilustra o funcionamento do software, apresentando algumas realizações (ou cenários) de casos de uso selecionadas e explica como os diversos elementos do modelo de design contribuem para a respectiva funcionalidade.]

# Visão Lógica

[Esta seção descreve as partes significativas do ponto de vista da arquitetura do modelo de design, como sua divisão em subsistemas e pacotes. Além disso, para cada pacote significativo, ela mostra sua divisão em classes e utilitários de classe. Apresente as classes significativas do ponto de vista da arquitetura e descreva suas responsabilidades, bem como alguns relacionamentos, operações e atributos de grande importância.]

### Visão Geral

[Esta subseção descreve toda a decomposição do modelo de design em termos de camadas e de hierarquia de pacotes.]

### Pacotes de Design Significativos do Ponto de Vista da Arquitetura

[Para cada pacote significativo, inclua uma subseção com o respectivo nome, uma breve descrição e um diagrama com todos os pacotes e classes significativos nele contidos.

Para cada classe significativa no pacote, inclua o respectivo nome, uma breve descrição e, opcionalmente, uma descrição de algumas de suas responsabilidades, operações e atributos mais importantes.]

# Visão de Processos

[Esta seção descreve a decomposição do sistema em processos leves (threads simples de controle) e processos pesados (agrupamentos de processos leves). Organize a seção em grupos de processos que se comunicam ou interagem. Descreva os modos principais de comunicação entre processos, como transmissão de mensagens e interrupções.]

# Visão de Implantação

[Esta seção descreve uma ou mais configurações da rede física (hardware) na qual o software é implantado e executado. Ela é uma visão do Modelo de Implantação. Para cada configuração, ela deve indicar no mínimo os nós físicos (computadores, CPUs) que executam o software e as respectivas interconexões (barramento, LAN, ponto a ponto e assim por diante.) Inclua também um mapeamento dos processos da Visão de Processos nos nós físicos.]

# Visão de Implementação

[Esta seção descreve a estrutura geral do modelo de implementação, a divisão do software em camadas e subsistemas no modelo de implementação e todos os componentes significativos do ponto de vista da arquitetura.]

### Visão Geral

[Esta subseção nomeia e define as diversas camadas e o seu conteúdo, as regras que determinam a inclusão em uma camada específica e as fronteiras entre as camadas. Inclua um diagrama de componentes que mostre os relacionamentos entre as camadas. ]

### Camadas

[Para cada camada, inclua uma subseção com o respectivo nome, uma lista dos subsistemas localizados na camada e um diagrama de componentes.]

# Visão de Dados (opcional)

[Uma descrição da perspectiva de armazenamento de dados persistentes do sistema. Esta seção será opcional se os dados persistentes forem poucos ou inexistentes ou se a conversão entre o Modelo de Design e o Modelo de Dados for trivial.] --&gt;

&lt;h2 id=&quot;tamanho-e-desempenho&quot;&gt;Tamanho e Desempenho&lt;/h2&gt;

&lt;p&gt;O Software final deve ser menor que 1GB e requisitarmenos de 1GB de RAM para executar com desempenho mínimo de 30fps.&lt;/p&gt;

&lt;!-- # Qualidade

[Uma descrição de como a arquitetura do software contribui para todos os recursos (exceto a funcionalidade) do sistema: extensibilidade, confiabilidade, portabilidade e assim por diante. Se essas características tiverem significado especial, como, por exemplo, implicações de proteção, segurança ou privacidade, elas devem ser claramente delineadas.]
 --&gt;
</description>
        <pubDate>Sat, 11 Apr 2015 07:00:03 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/11/arquitetura.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/11/arquitetura.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Caso de Uso</title>
        <description>&lt;h1 id=&quot;caso-de-uso&quot;&gt;Caso de Uso&lt;/h1&gt;
&lt;hr /&gt;

&lt;center&gt;
    &lt;img src=&quot;/img/uc.png&quot; alt=&quot;Caso de Uso&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Fri, 10 Apr 2015 11:11:00 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/10/use_case.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/10/use_case.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Modelo de Domínio</title>
        <description>&lt;h3 id=&quot;modelo-de-domnio&quot;&gt;Modelo de Domínio&lt;/h3&gt;

&lt;center&gt;
    &lt;img src=&quot;/img/Domain.png&quot; alt=&quot;Domain&quot; width=&quot;400%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 20:12:00 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/09/diagram_domain.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/09/diagram_domain.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Diagrama de Sequência</title>
        <description>&lt;h3 id=&quot;diagrama-de-sequncia-configuraes&quot;&gt;Diagrama de Sequência Configurações&lt;/h3&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;center&gt;
  &lt;script src=&quot;/js/mermaid.full.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;mermaid&quot;&gt;
  sequenceDiagram
    Jogador-&amp;gt;&amp;gt;Game: 1: toMainMenu()
    Game-&amp;gt;&amp;gt;Cena: 1.1: makeCene()
    Cena--&amp;gt;Game:
    Game--&amp;gt;Jogador:
    loop Jogando
        Jogador-&amp;gt;&amp;gt;Game: 2: buttonEvent()
    	Game-&amp;gt;&amp;gt;Cena: 2.1: doAction()
    	Cena--&amp;gt;Game:
    end
  &lt;/div&gt;
&lt;/center&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 19:12:00 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/09/diagram_state.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/09/diagram_state.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Diagrama de Sequência - Configurações</title>
        <description>&lt;h3 id=&quot;diagrama-de-sequncia-configuraes&quot;&gt;Diagrama de Sequência Configurações&lt;/h3&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;center&gt;
  &lt;script src=&quot;/js/mermaid.full.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;mermaid&quot;&gt;
  sequenceDiagram
    Jogador-&amp;gt;&amp;gt;Configurações: Acessa Configurações()
    Configurações--&amp;gt;Jogador: Mostra Tela()
    Jogador-&amp;gt;&amp;gt;Configurações: Executa ação()
    Configurações--&amp;gt;&amp;gt;Estado do Jogo: Efetua comando()
    Estado do Jogo--&amp;gt;Configurações: Retorna alteração()
    Configurações--&amp;gt;Jogador: Mostra Tela()
  &lt;/div&gt;
&lt;/center&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 19:11:00 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/09/diagram_state_config.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/09/diagram_state_config.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Máquina de Estado</title>
        <description>&lt;div class=&quot;row&quot;&gt;
    &lt;h3&gt;Durante o jogo&lt;/h3&gt;
  &lt;div class=&quot;small-11 small-centered columns&quot;&gt;
    &lt;script src=&quot;/js/mermaid.full.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;mermaid&quot;&gt;
      graph TD
        A((1&lt;br /&gt;Iniciando partida&lt;br /&gt;e: Inicia partida)) --&amp;gt;|Inicia fase| B((2&lt;br /&gt;Iniciando fase&lt;br /&gt;e:Inicia fase))
        B --&amp;gt;|Joga fase| C((3&lt;br /&gt;Jogando&lt;br /&gt;e: Joga fase))
        C --&amp;gt;|Pausa| D((4&lt;br /&gt;Jogo pausado&lt;br /&gt;e: Pausa fase))
        D --&amp;gt;|Volta ao jogo| C
        D --&amp;gt;|Reinicia fase| B
        C --&amp;gt;|Morre| E((5&lt;br /&gt;Morto&lt;br /&gt;e: Morre))
        C --&amp;gt;|Conclui fase| F((6&lt;br /&gt;Fase concluída&lt;br /&gt;e: Conclui fase))
        F --&amp;gt;|Inicia nova fase| B
        E --&amp;gt;|Reinicia fase| B 
        D --&amp;gt;|Termina partida| G((7&lt;br /&gt;Partida terminada&lt;br /&gt;e: Termina partida))
        E --&amp;gt;|Termina partida| G
        F --&amp;gt;|Termina partida| G
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 18:11:00 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/09/maquina_de_estado.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/09/maquina_de_estado.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Léxicos</title>
        <description>&lt;h1 id=&quot;lxicos&quot;&gt;Léxicos&lt;/h1&gt;
&lt;hr /&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;br /&gt;&lt;center&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;&lt;b&gt;Termo&lt;/b&gt;&lt;/th&gt;
                &lt;th&gt;Denotação&lt;/th&gt;
                &lt;th&gt;Conotação&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Jogador&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Alguém que executa o programa a fim de jogar.&lt;/td&gt;
                &lt;td&gt;Abre o jogo, seleciona fase e joga.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Inimigo&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Objeto não controlado pelo jogador.&lt;/td&gt;
                &lt;td&gt;Atinge o jogador, reduzindo sua vida.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Denotação&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Espaçonave controlada pelo jogador.&lt;/td&gt;
                &lt;td&gt;Movimentada pelo jogador, capaz de atirar.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Spaceship&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Objeto não controlado pelo jogador.&lt;/td&gt;
                &lt;td&gt;Atinge o jogador, reduzindo sua vida.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Fase&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Ambiente que contém jogador e inimigos.&lt;/td&gt;
                &lt;td&gt;Selecionada pelo jogador.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;Adentrada à medida que o jogador conclui a fase anterior com sucesso.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Rohinianos&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Inimigo nascido em Rohines.&lt;/td&gt;
                &lt;td&gt;Atinge o jogador, reduzindo sua vida.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;Objeto não controlado pelo jogador.&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Ascarth&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Planeta colonizado por seres humanos.&lt;/td&gt;
                &lt;td&gt;Planeta a ser alcançado pelo jogador.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;Abrigo seguro para humanos sendo caçados.&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;b&gt;Disparo&lt;/b&gt;&lt;/td&gt;
                &lt;td&gt;Tipo de munição utilizada pelo jogador.&lt;/td&gt;
                &lt;td&gt;O jogador dispara, se atingir algum inimigo, este é destruído.&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;&lt;/center&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 13:50:03 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/05/lexicos.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/05/lexicos.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
      <item>
        <title>Fluxo de Cenários</title>
        <description>&lt;h1 id=&quot;fluxo-de-cenrios&quot;&gt;Fluxo de Cenários&lt;/h1&gt;
&lt;hr /&gt;

&lt;center&gt;
    &lt;img src=&quot;/img/fluxo.png&quot; alt=&quot;Fluxo de Cenários&quot; width=&quot;80%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 05:51:03 -0300</pubDate>
        <link>http://spacewars.github.io/doc/2015/04/05/fluxo.html</link>
        <guid isPermaLink="true">http://spacewars.github.io/doc/2015/04/05/fluxo.html</guid>
        
        
        <category>doc</category>
        
      </item>
    
  </channel>
</rss>
